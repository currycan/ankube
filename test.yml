- hosts: "{{ groups['masters'][0] }}"
# - hosts:
#   - kube_cluster
# - hosts: "{{ groups['masters'] }}"
# - hosts: kube_cluster
# - hosts: "{{groups['kube_nodes']}}"
# - hosts: etcds
# - hosts: "{{ groups['deploy'][0] }}"
  become: true
  gather_facts: true
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  vars:
    # ansible_python_interpreter: "/usr/bin/python3"
    # token_bytes: "{{ lookup('password', '/dev/null length=32 chars=digits,ascii_letters,digits') | lower | b64encode }}"
    image: "docker.io/coredns/coredns:{{ coredns_version }}"
    file: "coredns-{{ coredns_version }}"
    # feature-gates: "{% for k,v in apiserver.feature_gates.items() %}{%- if k != 'None' -%}{{ k }}={{ v | lower }}{% if not loop.last %},{% endif %}{% endif %}{% endfor %}"
  # roles:
  tasks:
  - debug: var=controller_manager.feature_gates
  - debug: var="controller_manager.feature_gates == None"
  # - debug: var=image.split('/')[0:2]|join('/')
  # - debug: var=image.split('/')[1:3]|join('/')

  # - debug: var=binary
  # - debug: var=ansible_facts

  # - name: 生成 bootstrap_token_id
  #   set_fact:
  #     bootstrap_token_id: "{{ lookup('password', '/dev/null length=6 chars=digits,ascii_letters,digits') | lower }}"
  # - name: 生成 bootstrap_token_secret
  #   set_fact:
  #     bootstrap_token_secret: "{{ lookup('password', '/dev/null length=16 chars=digits,ascii_letters,digits') | lower }}"
  # - name: 生成 bootstrap_token
  #   set_fact:
  #     bootstrap_token: "{{ bootstrap_token_id + '.' + bootstrap_token_secret }}"
  # - debug: var=bootstrap_token_id
  # - debug: var=bootstrap_token_secret
  # - debug: var=bootstrap_token

  # - name: test
  #   include_role:
  #     name: k8s-setup
  #     # tasks_from: k8s-setup/tasks/common/tools.yml

  # - name: Reset etcd cluster
  #   include_tasks: "{{ inventory_dir }}/roles/etcd/install/tasks/clean.yml"

  # - name: Reset k8s cluster
  #   include_tasks: "{{ inventory_dir }}/roles/k8s-setup/tasks/clean.yml"

  # - name: helm 安装 cert-manager
  #   register: cert_result
  #   # when: "'cert-manager' not in helm_list_results.stdout"
  #   shell: >
  #     [ `{{ kubernetes_bin_dir }}/kubectl get ns cert-manager --ignore-not-found | wc -l` -eq 0 ] && \
  #     {{ kubernetes_bin_dir }}/kubectl create ns cert-manager;
  #     {{ helm3_bin_dir }}/helm install cert-manager --namespace cert-manager jetstack/cert-manager \
  #       --set installCRDs=true \
  #       --set image.tag=v1.1.0 \
  #       --set prometheus.enabled=false \
  #       --set webhook.image.tag=v1.1.0 \
  #       --set cainjector.image.tag=v1.1.0;
