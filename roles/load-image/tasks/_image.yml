- name: 拉取 {{ out_item.item.value.name }} 离线镜像文件
  when: not out_item.stat.exists
  copy:
    src: "{{ cache_dir + 'images/' + out_item.item.value.file }}.tar"
    dest: "{{ cache_dir + 'images/' + out_item.item.value.file }}.tar"

- name: 判断 {{ out_item.item.value.name }} 镜像是否已经存在
  shell: >
    img={% if 'docker.io' in out_item.item.value.name %}{{ out_item.item.value.name.split('/')[1:3]|join('/') }}{% else %}{{ out_item.item.value.name }}{% endif %};
    name=`echo $img | awk -F':' '{print $1}'`;
    tag=`echo $img | awk -F':' '{print $2}'`;
    [ `{{ docker_bin_dir }}/docker images | grep ${name} | grep ${tag} | wc -l` -ne 0 ] && echo "yes";
    exit 0
  register: image_exist

- name: 加载 {{ out_item.item.value.name }} 镜像
  when: image_exist.stdout != 'yes'
  shell: >
    {{ docker_bin_dir }}/docker load -i {{ cache_dir + 'images/' + out_item.item.value.file }}.tar;
  # async表示上述命令的等待时间, 设置为0时会一直等待命令结束
  async: 1
  # poll表示检查step操作结果的间隔时长,设置为0表示 不用等待结果,继续做下面的操作,我们可以在下面的step中来验证这个命令是否成功执行.
  poll: 0
  register: load_image_result
