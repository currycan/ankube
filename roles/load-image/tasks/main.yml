- block:
  - name: 创建 docker 离线 images 存放目录
    file: path="{{ cache_dir + 'images' }}" state=directory

  - name: 所有节点加载离线镜像
    block:
    - name: 判断所有节点依赖离线镜像是否存在
      when:
        - inventory_hostname in groups['kube_cluster']
        - item.value.type == 'all'
        - item.value.enable == 'true'
      stat: path="{{ cache_dir + 'images/' + item.value.file }}.tar"
      with_dict: "{{ images }}"
      register: check_all_images

    - name: 所有节点加载离线镜像
      when:
        - inventory_hostname in groups['kube_cluster']
        - out_item.item.value.type == 'all'
        - out_item.item.value.enable == 'true'
      include_tasks: _image.yml
      loop_control:
        loop_var: out_item
      with_items: "{{ check_all_images['results'] }}"

  - name: master 节点加载离线镜像
    block:
    - name: 判断 master 节点依赖离线镜像是否存在
      when:
        - inventory_hostname in groups['kube_masters']
        - item.value.type == 'master'
        - item.value.enable == 'true'
      stat: path="{{ cache_dir + 'images/' + item.value.file }}.tar"
      with_dict: "{{ images }}"
      register: check_master_images

    - name: master 节点加载离线镜像
      when:
        - inventory_hostname in groups['kube_masters']
        - out_item.item.value.type == 'master'
        - out_item.item.value.enable == 'true'
      include_tasks: _image.yml
      loop_control:
        loop_var: out_item
      with_items: "{{ check_master_images['results'] }}"

  - name: worker 节点加载离线镜像
    block:
    - name: 判断 worker 节点依赖离线镜像是否存在
      when:
        - inventory_hostname in groups['kube_nodes']
        - item.value.type == 'worker'
        - item.value.enable == 'true'
      stat: path="{{ cache_dir + 'images/' + item.value.file }}.tar"
      with_dict: "{{ images }}"
      register: check_node_images

    - name: worker 节点加载离线镜像
      when:
        - inventory_hostname in groups['kube_nodes']
        - out_item.item.value.type == 'worker'
        - out_item.item.value.enable == 'true'
      include_tasks: _image.yml
      loop_control:
        loop_var: out_item
      with_items: "{{ check_node_images['results'] }}"
  when: normal_install is undefined or not normal_install
