- block:
  - name: 判断 gen_bootstrap_token 配置文件是否存在
    stat: path="{{ k8s_pki_dir }}/token.csv"
    register: check_token_file

  - name: 判断 bootstrap_token 是否已经写入配置文件
    when: check_token_file.stat.exists
    shell: "cat {{ k8s_pki_dir }}/token.csv"
    register: token_presence

  - block:
    - name: 生成 bootstrap_token_id
      set_fact:
        bootstrap_token_id: "{{ lookup('password', '/dev/null length=6 chars=digits,ascii_letters,digits') | lower }}"

    - name: 生成 bootstrap_token_secret
      set_fact:
        bootstrap_token_secret: "{{ lookup('password', '/dev/null length=16 chars=digits,ascii_letters,digits') | lower }}"

    - name: 生成 bootstrap_token
      set_fact:
        bootstrap_token: "{{ bootstrap_token_id + '.' + bootstrap_token_secret }}"

    - name: bootstrap_token 写入独立配置文件
      blockinfile:
        path: "{{ k8s_pki_dir }}/token.csv"
        block: |
          bootstrap_token: {{ bootstrap_token }}
        create: true
    when: (not check_token_file.stat.exists) or (token_presence.skipped is defined and token_presence.stdout.find('bootstrap_token') == -1)
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: 获取 bootstrap token.csv文件
  slurp:
    src: "{{ item }}"
  with_items:
    - "{{ k8s_pki_dir }}/token.csv"
  register: slurp_token_file
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: 所有 master 节点配置 bootstrap token.csv文件
  when: inventory_hostname in groups['kube_masters']
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ slurp_token_file.results }}"
