- block:
  - name: 获取当前 lb 服务运行状态
    shell: >
      lb_running_num=0;
      for lb in {"{{ lb_mode }}","keepalived"};
      do
        [ `{{ docker_bin_dir }}/docker ps --filter name=k8s_lb-${lb}.* --filter status=running | wc -l` -eq 2 ] && lb_running_num=`expr $lb_running_num + 1`;
      done;
      echo $lb_running_num
    register: lb_statuses_result

  - block:
    - name: 创建 load-balancer 配置文件目录
      file:
        name: "{{ lb_config_dir }}"
        state: directory

    - name: 确认没有运行其他负载均衡器
      when: lb_mode == "slb"
      file:
        name: "{{ item }}"
        state: absent
      with_items:
      - "{{ lb_config_dir }}"
      - "{{ manifest_dir }}/lb-keepalived.yaml"
      - "{{ manifest_dir }}lb-kube-apiserver.yaml"

    - name: 生成 {{ lb_mode }} lb 配置文件
      when: '(item.lb is defined and item.lb == lb_mode) or "keepalived" in item.src'
      template:
        src: "{{ item.src }}.j2"
        dest: "{{ item.dest }}"
        owner: "root"
        group: "root"
        mode: "0644"
      with_items:
        # keepalived
        - { src: "keepalived/keepalived.yaml", dest: "{{ manifest_dir }}/keepalived.yaml" }
        # envoy
        - { src: "envoy/envoy.conf.yaml", dest: "{{ lb_config_dir }}/envoy.yaml", lb: "envoy" }
        - { src: "envoy/envoy.yaml", dest: "{{ manifest_dir }}/lb-envoy.yaml", lb: "envoy" }
        # haproxy
        - { src: "haproxy/haproxy.cfg", dest: "{{ lb_config_dir }}/haproxy.cfg", lb: "haproxy" }
        - { src: "haproxy/haproxy.yaml", dest: "{{ manifest_dir }}/lb-haproxy.yaml", lb: "haproxy" }
        # nginx
        - { src: "nginx/nginx.conf", dest: "{{ lb_config_dir }}/nginx.conf", lb: "nginx" }
        - { src: "nginx/nginx.yaml", dest: "{{ manifest_dir }}/lb-nginx.yaml", lb: "nginx" }
        # openresty
        - { src: "nginx/nginx.conf", dest: "{{ lb_config_dir }}/nginx.conf", lb: "openresty" }
        - { src: "openresty/openresty.yaml", dest: "{{ manifest_dir }}/lb-openresty.yaml", lb: "openresty" }

    - name: 渲染临时 kubelet.conf 文件
      template:
        src: "{{ item.src }}.j2"
        dest: "{{ item.dest }}"
        owner: "root"
        group: "root"
        mode: "0644"
      with_items:
        - { src: "kubelet/20-kubelet-override.conf", dest: "{{ systemd_service_dir }}/kubelet.service.d/20-kubelet-override.conf" }
        - { src: "kubelet/kubelet.service", dest: "{{ systemd_service_dir }}/kubelet.service" }

    - name: bootstrap lb 服务
      systemd:
        name: kubelet
        daemon_reload: yes
        state: restarted
        enabled: yes
      register: started_kubelet
      until: started_kubelet is succeeded
      retries: 3
      delay: "{{ retry_stagger }}"

    - name: 以轮询的方式等待 {{ lb_mode }} 运行完成
      shell: nc -z -w 3 127.0.0.1 {{ lb_secure_port }}
      register: lb_status
      until: lb_status.rc == 0
      retries: 5
      delay: 15

    - name: 以轮询的方式等待 keepalived 运行完成
      shell: nc -z -w 3 {{ lb_apiserver_ip | trim }} {{ lb_secure_port }}
      register: keepalived_status
      until: keepalived_status.rc == 0
      retries: 5
      delay: 15

    - name: 移除临时 kubelet.conf 文件
      file:
        name: "{{ systemd_service_dir }}/kubelet.service.d/20-kubelet-override.conf"
        state: absent

    - name: 停止 kubelet
      systemd:
        name: kubelet
        daemon_reload: yes
        state: stopped
        enabled: yes
    when: 'lb_statuses_result.stdout != "2"'
  when:
  - groups['kube_masters'] | length > 1
  - inventory_hostname in groups['kube_masters']
