- block:
  - name: 判断 EncryptionConfig 配置文件是否存在
    stat: path="{{kubernetes_etc_dir}}/encryption_config_secret.yml"
    register: check_file

  - name: 判断随机密钥是否已经写入配置文件
    when: check_file.stat.exists
    shell: "cat {{kubernetes_etc_dir}}/encryption_config_secret.yml"
    register: presence

  - name: 生成 EncryptionConfig 随机密钥
    when: not check_file.stat.exists or presence.stdout is defined and presence.stdout.find('encryption_config_secret') == -1
    set_fact:
      secret: "{{ lookup('password', '/dev/null length=32 chars=digits,ascii_letters,digits') | lower | b64encode }}"

  - name: 写入独立配置文件
    when: not check_file.stat.exists or presence.stdout is defined and presence.stdout.find('encryption_config_secret') == -1
    blockinfile:
      path: "{{kubernetes_etc_dir}}/encryption_config_secret.yml"
      block: |
        encryption_config_secret: {{ secret }}
      create: true
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: 获取 encryption_config 文件
  slurp:
    src: "{{ item }}"
  with_items:
    - "{{kubernetes_etc_dir}}/encryption_config_secret.yml"
  register: slurp_config_files
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: master 节点配置 encryption_config 文件
  when: inventory_hostname in groups['kube_masters']
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ slurp_config_files.results }}"
