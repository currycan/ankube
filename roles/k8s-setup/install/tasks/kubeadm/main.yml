# 生成 kubeadm bootstrap token
- include_tasks: common/gen_bootstrap_token.yml
  register: create_token

- name: 所有 kube_cluster 节点渲染 kubeadm 的配置文件
  when: create_token is succeeded
  template:
    src: >-
      {% if inventory_hostname == groups['masters'][0] -%}
      kubeadm/kubeadm-controlplane-init.yaml.j2
      {%- elif inventory_hostname in (groups['masters'] + groups['add_masters']) -%}
      kubeadm/kubeadm-controlplane-join.yaml.j2
      {%- else -%}
      kubeadm/kubeadm-join.yaml.j2
      {%- endif %}
    dest: "{{ kubernetes_etc_dir }}/kubeadm-config.yaml"
    owner: root
    mode: 0644

- name: 所有 kube_cluster 节点渲染相关配置文件
  template:
    src="{{ item.src }}.j2"
    dest="{{ item.dest }}"
    owner="root"
    group="root"
    mode="0644"
  with_items:
    - { src: "kubelet/10-kubelet.conf", dest: "{{ systemd_service_dir }}/kubelet.service.d/10-kubeadm.conf" }
    - { src: "kubelet/kubelet.service", dest: "{{ systemd_service_dir }}/kubelet.service" }
    - { src: "kubelet/kubelet-config.yml", dest: "{{ kubelet_data_dir }}/config-tmp.yaml" }
    - { src: "kube-proxy/kube-proxy-config.yaml", dest: "{{ kube_proxy_data_dir }}/config-tmp.yaml" }
    # - { src: "cni-plugin/cni-default.conf", dest: "{{ cni_etc_dir }}/cni-default.conf" }

- name: 和并 kubelet-config.yml 和 kube-proxy-config.yaml 至 kubeadm-config.yaml
  shell: >
    cat {{ kubelet_data_dir }}/config-tmp.yaml >> {{ kubernetes_etc_dir }}/kubeadm-config.yaml;
    cat {{ kube_proxy_data_dir }}/config-tmp.yaml >> {{ kubernetes_etc_dir }}/kubeadm-config.yaml;
    # rm -f {{ kubelet_data_dir }}/config-tmp.yml;
    # rm -f {{ kube_proxy_data_dir }}/config-tmp.yml;

# - name: 所有 kube_cluster 节点加载 infra 和 kube-proxy 镜像
#   shell: "{{ docker_bin_dir }}/docker load -i {{ cache_dir + 'images/' + item }}.tar"
#   with_items:
#     - "{{ images.infra.file }}"
#     - "{{ images.proxy.file }}"

# - name: 加载 master 节点各组件镜像
#   when: "inventory_hostname in (groups['masters'] + groups['add_masters'])"
#   shell: "{{ docker_bin_dir }}/docker load -i {{ cache_dir + 'images/' + item }}.tar"
#   with_items:
#     - "{{ images.apiserver.file }}"
#     - "{{ images.controller_manager.file }}"
#     - "{{ images.scheduler.file }}"

# - name: worker 节点加载 coredns 镜像
#   when: inventory_hostname in (groups['nodes'] + groups['add_nodes'])
#   shell: "{{ docker_bin_dir }}/docker load -i {{ cache_dir + 'images/' + item }}.tar"
#   with_items:
#     - "{{ images.coredns.file }}"
#     - "{{ images.autoscaler.file }}"

- name: 设置 kubelet 开机启动
  systemd:
    name: kubelet
    daemon_reload: yes
    enabled: yes

- include_tasks: master.yml
  register: master_result
  when: "inventory_hostname in (groups['masters'] + groups['add_masters'])"

- include_tasks: worker.yml
  when:
    - master_result is succeeded
    - inventory_hostname in (groups['nodes'] + groups['add_nodes'])

- name: 手动 approve csr
  when: "kubeadm_way is defined and kubeadm_way.enable and kubeadm_way.kubeadm_cert"
  shell: >
    {{ kubernetes_bin_dir }}/kubectl get csr | grep 'Pending' | awk '{print $1}'| xargs {{ kubernetes_bin_dir }}/kubectl certificate approve
  environment:
      KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
