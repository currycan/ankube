- name: 安装 kubernetes 各组件
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.bash_profile"
    state: present
    regexp: "{{ kubernetes_bin_dir }}"
    line: export PATH="{{ kubernetes_bin_dir }}:$PATH"

- name: 添加 kubectl kubeadm 命令自动补全
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    state: present
    regexp: "{{ item }} completion"
    line: "source <({{ kubernetes_bin_dir }}/{{ item }} completion bash)"
  with_items:
    - kubectl
    - kubeadm
    - kustomize

- name: 当前会话加载 kubectl kubeadm 命令，并自动补全
  shell: >
    {{ kubernetes_bin_dir }}/{{ item }} completion bash > /etc/bash_completion.d/{{ item }};
    source {{ ansible_env.HOME }}/.bash_profile
  args:
    executable: /bin/bash
  with_items:
    - kubectl
    - kubeadm

- name: 所有 kube_cluster 节点创建所需目录
  file:
    name: "{{ item }}"
    state: directory
  with_items:
  - "{{ ansible_env.HOME }}/.kube/"
  - "{{ kubernetes_etc_dir }}"
  - "{{ manifest_dir }}"
  - "{{ cni_etc_dir }}"
  - "{{ systemd_service_dir }}/kubelet.service.d"
  - "{{ kubelet_pki_dir }}"
  - "{{ kube_proxy_pki_dir }}"
  - "{{ kubernetes_log_dir }}/kubelet"
  - "{{ kubernetes_log_dir }}/kube-proxy"

- name: 二进制方式搭建 kubernetes 集群
  when: "binary_way is defined and binary_way.enable"
  include_tasks: binary/main.yml

- name: kubeadm 方式搭建 kubernetes 集群
  when: "kubeadm_way is defined and kubeadm_way.enable"
  include_tasks: kubeadm/main.yml

- name: 从 groups['masters'][0] 节点分发 kubeconfig admin 文件
  synchronize: src="{{ kubernetes_etc_dir }}/admin.conf" dest="{{ ansible_env.HOME }}/.kube/config"
  register: install_res
  delegate_to: "{{ groups['masters'][0] }}"

- name: 禁止 master 节点被调度，设置节点标签
  when: inventory_hostname in (groups['masters'] + groups['add_masters'])
  shell: >
    {{ kubernetes_bin_dir }}/kubectl cordon {{ inventory_hostname }};
    {{ kubernetes_bin_dir }}/kubectl taint node {{ inventory_hostname }} node-role.kubernetes.io/master=true:NoSchedule --overwrite;
    {{ kubernetes_bin_dir }}/kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/master='' --overwrite;
    {{ kubernetes_bin_dir }}/kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/ingress='' --overwrite
  until: set_taint_master.rc == 0
  retries: 3
  delay: "{{ retry_stagger }}"
  register: set_taint_master

- name: 允许 worker 节点被调度，设置节点标签
  when: inventory_hostname in (groups['nodes'] + groups['add_nodes'])
  shell: >
    [ `{{ kubernetes_bin_dir }}/kubectl get nodes {{ inventory_hostname }} --show-labels | grep cloudprovider` ] && \
    {{ kubernetes_bin_dir }}/kubectl taint node {{ inventory_hostname }} node.cloudprovider.kubernetes.io/uninitialized-;
    {{ kubernetes_bin_dir }}/kubectl label nodes {{ inventory_hostname }} node-role.kubernetes.io/worker='' --overwrite
  register: set_taint_worker
  until: set_taint_worker.rc == 0
  retries: 3
  delay: "{{ retry_stagger }}"

- block:
  - name: 创建 endpoint 配置清单目录
    file: name={{ item }} state=directory
    with_items: "{{ kubernetes_etc_dir }}/endpoint"

  - name: 配置核心组件的 endpoint 清单文件，以便用于prometheus监控
    template: src="endpoint/{{ item }}.j2" dest="{{ kubernetes_etc_dir }}/endpoint/{{ item }}"
    with_items:
      - control-plane-ep.yml
      - data-plane-ep.yml

  - name: 创建核心组件的 endpoint
    shell: >
      {{ kubernetes_bin_dir }}/kubectl apply -f {{ kubernetes_etc_dir }}/endpoint/{{ item }}
    environment:
      KUBECONFIG: "{{ kubernetes_etc_dir }}/admin.conf"
    register: apply_endpoint
    until: apply_endpoint.rc == 0
    retries: 3
    delay: "{{ retry_stagger }}"
    with_items:
      - control-plane-ep.yml
      - data-plane-ep.yml
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: 安装 k8s 常用工具
  include_tasks: common/tools.yml
  register: install_tools

- name: 普通用户配置集群访问权限
  when: install_tools is succeeded
  include_tasks: common/normal-user-admission.yml
