- block:
  - name: 创建离线镜像存放目录
    file: path="{{ cache_dir + 'images' }}" state=directory

  - name: 判断离线镜像是否存在
    stat: path="{{ cache_dir + 'images/' + item.value.file }}.tar"
    with_dict: "{{ images }}"
    register: check_images

  - name: 从下载二进制文件时归档文件中获取 calico 镜像
    when:
      - not item.stat.exists
      - item.item.key.split('_')[0] == "calico"
      - item.item.value.enable == "true"
    copy:
      src: "{{ cache_dir + item.item.key.split('_')[0] + '-' + item.item.value.name.split(':')[1] +  '/' + item.item.value.file.split('-')[:-1] | join('-') + '.tar' }}"
      dest: "{{ cache_dir + 'images/' + item.item.value.file }}.tar"
    with_items: "{{ check_images['results'] }}"

  - block:
    - name: 安装 crt engine
      include_tasks: cri-engeine.yml

    - name: kubernetes 各组件镜像重打tag
      when:
        - not item.stat.exists
        - item.item.value.file.split('-')[0] == "kube"
        - item.item.value.enable == "true"
      shell: >
        {% if container_runtime == 'docker' -%}
        docker load -i {{ cache_dir + 'kubernetes-v' + kube_version + '/' + item.item.value.file.split('-')[:-1] | join('-') + '.tar' }};
        docker images | grep kube | grep amd64 | awk '{print "docker tag ",$1":"$2,$1":"$2}' | sed -e 's#-amd64##2' | sed -e 's#k8s.gcr.io#{{kube_image_repository}}#2' | sh -x;
        docker images | grep kube | grep amd64 | awk '{print "docker rmi ",$1":"$2}' | sh -x;
        docker save -o {{ cache_dir + 'images/' + item.item.value.file }}.tar {{ item.item.value.name }}
        {% elif container_runtime == 'containerd' -%}
        {{ containerd_bin_dir }}/ctr -n=k8s.io images import {{ cache_dir + 'kubernetes-v' + kube_version + '/' + item.item.value.file.split('-')[:-1] | join('-') + '.tar' }};
        crictl images | grep kube | grep amd64 | awk '{print "ctr -n k8s.io images tag ",$1":"$2,$1":"$2}' | sed -e 's#-amd64##2' | sed -e 's#k8s.gcr.io#{{kube_image_repository}}#2' | sh -x;
        crictl images| grep kube | grep amd64 | awk '{print "ctr -n k8s.io images rm ",$1":"$2}' | sh -x;
        ctr -n k8s.io images export {{ cache_dir + 'images/' + item.item.value.file }}.tar {{ item.item.value.name }}
        {%- endif -%}
      environment:
        PATH: "{{ docker_bin_dir }}:{{ containerd_bin_dir }}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"
      with_items: "{{ check_images['results'] }}"

    - debug: msg="{{ cri_engine_cli }} pull 离线镜像，根据网速不同，可能需要一定时间。。"
    - name: "{{ cri_engine_cli }} pull images"
      when:
        - not item.stat.exists
        - item.item.key.split('_')[0] != "calico"
        - item.item.value.enable == "true"
      # https://github.com/containerd/containerd/issues/3340
      # --all-platforms 参数一定要配置上
      shell: >
        {% if container_runtime == 'docker' -%}
        docker pull {{ item.item.value.name }};
        {% elif container_runtime == 'containerd' -%}
        ctr -n k8s.io images pull {{ item.item.value.name }} --all-platforms;
        {%- endif -%}
      environment:
        PATH: "{{ docker_bin_dir }}:{{ containerd_bin_dir }}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"
        http_proxy: "{{ proxy_env.http_proxy }}"
        https_proxy: "{{ proxy_env.https_proxy }}"
      with_items: "{{ check_images['results'] }}"

    - name: save 离线镜像至 {{ cache_dir + 'images' }}
      when:
        - not item.stat.exists
        - item.item.key.split('_')[0] != "calico"
        - item.item.value.enable == "true"
      shell: >
        {% if container_runtime == 'docker' -%}
        docker save -o {{ cache_dir + 'images/' + item.item.value.file }}.tar {{ item.item.value.name }};
        {% elif container_runtime == 'containerd' -%}
        ctr -n k8s.io images export {{ cache_dir + 'images/' + item.item.value.file }}.tar {{ item.item.value.name }}
        {%- endif -%}
      environment:
        PATH: "{{ docker_bin_dir }}:{{ containerd_bin_dir }}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"
      with_items: "{{ check_images['results'] }}"
    when: 'not (frozen_way is defined and frozen_way)'

  - block:
    - name: 安装 download-frozen-image-v2.sh
      include_tasks: install-frozen-image.yml

    - name: download-frozen-image-v2.sh 下载 images
      when:
        - not item.stat.exists
        - item.item.key.split('_')[0] != "calico"
        - item.item.value.enable == "true"
      shell: >
        mkdir -p /tmp/images/manifests_dir;
        cd /tmp/images/;
        img={% if 'docker.io' in item.item.value.name %}{{ item.item.value.name.split('/')[1:3]|join('/') }}{% else %}{{ image }}{% endif %};
        download-frozen-image-v2.sh manifests_dir ${img};
        [ `ls -A manifests_dir` ] && \
        tar -cC manifests_dir . > {{ cache_dir + 'images/' + item.item.value.file }}.tar \
        || exit 1;
        rm -rf *
      environment:
        http_proxy: "{{ proxy_env.http_proxy }}"
        https_proxy: "{{ proxy_env.https_proxy }}"
      loop_control:
        loop_var: item
      with_items: "{{ check_images['results'] }}"
      register: frozen_image
      until: frozen_image.rc != 0
      retries: 2
      delay: "{{ retry_stagger }}"
    when: 'frozen_way is defined and frozen_way'
  run_once: true
  delegate_to: "{{ groups['deploy'][0] }}"
