---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-controller
  namespace: {{ addon.namespace }}
spec:
{% if groups['kube_masters'] | length > 1 %}
  replicas: 2
{% endif %}
  template:
    spec:
      # pod 亲和/反亲和配置中 topologyKey 不允许为空，topologyKey 决定 pod 是要运行在哪种属性的 node
      affinity:
        # # pod 亲和性，尽力只调度到 kubernetes.io/hostname 标签的节点,且该节点上的 pod 有 app.kubernetes.io/instance 存在（和下面的反亲和互斥）
        # podAffinity:
        #   preferredDuringSchedulingIgnoredDuringExecution:  # 软策略
        #   - weight: 1
        #     podAffinityTerm:
        #       labelSelector:
        #         matchExpressions:
        #         - key: 'app.kubernetes.io/instance'
        #           operator: "Exists"
        #       topologyKey: "kubernetes.io/hostname"
        # # pod 反亲和性，强制在 kubernetes.io/hostname 标签的节点中不能同时运行多个app.kubernetes.io/instance=ingress-nginx 的 pod,也就是保证了副本都打散到不同节点
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:  # 硬策略
          - labelSelector:
              matchExpressions:
              - key: 'app.kubernetes.io/instance'
                operator: In
                values:
                - 'ingress-nginx'
            topologyKey: "kubernetes.io/hostname"
        # node 亲和性
        nodeAffinity:
          # 调度到 node-role.kubernetes.io/ingress 标签的节点
          requiredDuringSchedulingIgnoredDuringExecution:  # 硬策略
            nodeSelectorTerms:
            - matchExpressions:
              - key: 'node-role.kubernetes.io/ingress'
                operator: "Exists"
          # 尽力调度到master节点
          preferredDuringSchedulingIgnoredDuringExecution:  # 软策略
          - weight: 50
            preference:
              matchExpressions:
              - key: 'node-role.kubernetes.io/master'
                operator: In
                values:
{% for host in groups['kube_masters'] %}
                - {{ hostvars[host]['ansible_' + iface].ipv4.address }}
{% endfor %}
      tolerations:
        - operator: Exists
        - effect: ''
          key: node-role.kubernetes.io/master
          operator: Exists
      containers:
        - name: controller
          args:
            - /nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            # - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --enable-ssl-passthrough
            - --v=2
          env:
            - name: TZ
              value: Asia/Shanghai
          ports:
            - name: metrics
              containerPort: 10254
              protocol: TCP
