- name: 判断证书私钥是否存在
  when: "'helm' not in certs[0].bare"
  stat: path="{{ item.dir }}/{{ item.bare }}.key"
  with_items:
    - "{{ certs }}"
  register: check_cert_key_files

- name: 判断 helm 证书私钥是否存在
  when: "'helm' in certs[0].bare"
  stat: path="{{ item.dir }}/{{ item.bare }}-key.pem"
  with_items:
    - "{{ certs }}"
  register: check_helm_cert_key_files

- name: 获取 kubernetes master 节点 CA 证书
  when: check_cert_key_files['results'][0].item.bare == "kubelet"
  slurp:
    src: "{{ item }}"
  with_items:
    - "{{ kubernetes_ca }}"
    - "{{ kubernetes_ca_key }}"
  register: slurp_kubernetes_ca_certs
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: 分发 kubernetes CA 证书到各节点
  when:
    - check_cert_key_files['results'][0].item.bare == "kubelet"
    - inventory_hostname != groups['masters'][0]
  copy:
    dest: "{{ item.source }}"
    content: "{{ item.content | b64decode }}"
    owner: root
    group: root
    mode: 0644
  no_log: true
  with_items: "{{ slurp_kubernetes_ca_certs.results }}"

- name: 渲染 etcd 证书配置文件
  when: "'etcd' in certs[0].file"
  template:
    src: "{{ certs[0].file }}.j2"
    dest: "{{ item }}"
    owner: root
    mode: 0644
  with_items:
    - "{{ etcd_openssl_cnf }}"

- name: 渲染 kubernetest 证书配置文件
  when: "'kube' in certs[0].file"
  template:
    src: "{{ certs[0].file }}.j2"
    dest: "{{ item }}"
    owner: root
    mode: 0644
  with_items:
    - "{{ kube_openssl_cnf }}"

- include_tasks: "_certs.yml"
  when: "'helm' not in certs[0].bare"
  loop_control:
    loop_var: out_item
  with_items: "{{ check_cert_key_files['results'] }}"

- include_tasks: "_helm_certs.yml"
  when: "'helm' in certs[0].bare"
  loop_control:
    loop_var: out_item
  with_items: "{{ check_helm_cert_key_files['results'] }}"

- name: 获取待删除的证书临时文件
  find:
    paths: "{{ item }}"
    patterns: "*.csr,*.cnf,*.srl"
    # use_regex: true
  with_items:
    - "{{ k8s_pki_dir }}"
    - "{{ etcd_pki_dir }}"
  register: find_files_to_delete

- name: 删除证书签名请求文件
  include_tasks: "_delete_files.yml"
  loop_control:
    loop_var: out_item
  with_items: "{{ find_files_to_delete['results'] }}"
