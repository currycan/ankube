- hosts: "{{ groups['deploy'][0] }}"
  become: true
  gather_facts: true
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  vars:
    # ansible_python_interpreter: "/usr/bin/python3"
    token_bytes: "{{ lookup('password', '/dev/null length=32 chars=digits,ascii_letters,digits') | lower | b64encode }}"
  tasks:
  - name: reset
    shell: >
      cd /etc/ansible;
      ansible-playbook  reset-cluster.yml
    # async表示上述命令的等待时间, 设置为0时会一直等待命令结束
    async: 5
    # poll表示检查step操作结果的间隔时长,设置为0表示 不用等待结果,继续做下面的操作,我们可以在下面的step中来验证这个命令是否成功执行.
    poll: 0
    register: reset_result

  - name: init
    shell: >
      cd /etc/ansible;
      ansible-playbook  01.initialize.yml
    # async表示上述命令的等待时间, 设置为0时会一直等待命令结束
    async: 5
    # poll表示检查step操作结果的间隔时长,设置为0表示 不用等待结果,继续做下面的操作,我们可以在下面的step中来验证这个命令是否成功执行.
    poll: 0
    register: init_result

  - name: 确认 reset playbook 已经完成
    async_status: jid={{ reset_result.ansible_job_id }}
    register: reset_job_result
    until: reset_job_result.finished
    retries: 30

  - name: 确认 init playbook 已经完成
    async_status: jid={{ init_result.ansible_job_id }}
    register: init_job_result
    until: init_job_result.finished
    retries: 30
