# 二进制文件
binary:
  cfssl:
    enable: "{%- if binary_way is defined and binary_way.enable and binary_way.cfssl_cert -%}true{% else %}false{%- endif -%}"
    type: all
    url: "https://github.com/cloudflare/cfssl/releases/download/v{{ cfssl_version }}/cfssl_{{ cfssl_version }}_linux_amd64"
    file: "cfssl_{{ cfssl_version }}_linux_amd64"
    install_dir: "{{ cfssl_bin_dir }}"
    bin:
      - cfssl

  cfssljson:
    enable: "{%- if binary_way is defined and binary_way.enable and binary_way.cfssl_cert -%}true{% else %}false{%- endif -%}"
    type: all
    url: "https://github.com/cloudflare/cfssl/releases/download/v{{ cfssl_version }}/cfssljson_{{ cfssl_version }}_linux_amd64"
    file: "cfssljson_{{ cfssl_version }}_linux_amd64"
    install_dir: "{{ cfssl_bin_dir }}"
    bin:
      - cfssljson

  cfssl_certinfo:
    enable: "{%- if binary_way is defined and binary_way.enable and binary_way.cfssl_cert -%}true{% else %}false{%- endif -%}"
    type: all
    url: "https://github.com/cloudflare/cfssl/releases/download/v{{ cfssl_version }}/cfssl-certinfo_{{ cfssl_version }}_linux_amd64"
    file: "cfssl-certinfo_{{ cfssl_version }}_linux_amd64"
    install_dir: "{{ cfssl_bin_dir }}"
    bin:
      - cfssl-certinfo

  kubernetes:
    # enable: "{%- if binary_way is defined and binary_way.enable -%}true{% else %}false{%- endif -%}"
    enable: "true"
    type: kube_cluster
    # https://dl.k8s.io/release/stable.txt
    # https://github.com/kubernetes/kubernetes/tags
    url: "https://dl.k8s.io/v{{ kube_version }}/kubernetes-server-linux-amd64.tar.gz"
    file: "kubernetes-v{{ kube_version }}-server-linux-amd64.tar.gz"
    archive_dir: "kubernetes-v{{ kube_version }}"
    install_dir: "{{ kubernetes_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=3']"
    bin:
      - kubectl
      - kubeadm
      - kube-apiserver
      - kube-controller-manager
      - kube-scheduler
      - kubelet
      - kube-proxy
    images:
      - kube-apiserver.tar
      - kube-controller-manager.tar
      - kube-scheduler.tar
      - kube-proxy.tar

  kustomize:
    enable: "true"
    type: kube_cluster
    url: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv{{ kustomize_version }}/kustomize_v{{ kustomize_version }}_linux_amd64.tar.gz"
    file: "kustomize_v{{ kustomize_version }}_linux_amd64.tar.gz"
    archive_dir: "kustomize-v{{ kustomize_version }}"
    install_dir: "{{ kubernetes_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=0']"
    bin:
      - kustomize

  etcd:
    enable: "true"
    type: kube_etcds
    url: "https://github.com/etcd-io/etcd/releases/download/v{{ etcd_version }}/etcd-v{{ etcd_version }}-linux-amd64.tar.gz"
    file: "etcd-v{{ etcd_version }}-linux-amd64.tar.gz"
    archive_dir: "etcd-v{{ etcd_version }}"
    install_dir: "{{ etcd_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=1']"
    bin:
      - etcd
      - etcdctl

  containerd:
    enable: "true"
    type: kube_cluster
    url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/cri-containerd-cni-{{ containerd_version }}-linux-amd64.tar.gz"
    file: "cri-containerd-cni-{{ containerd_version }}-linux-amd64.tar.gz"
    archive_dir: "cri-containerd-cni-{{ containerd_version }}"
    install_dir: "{{ containerd_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=3']"
    bin:
      - containerd
      - containerd-shim
      - containerd-shim-runc-v1
      - containerd-shim-runc-v2
      - containerd-stress
      - crictl
      - critest
      - ctd-decoder
      - ctr
      - runc

  docker:
    enable: "{%- if container_runtime == 'docker' -%}true{% else %}false{%- endif -%}"
    type: kube_cluster
    url: "https://download.docker.com/linux/static/stable/x86_64/docker-{{ docker_version }}.tgz"
    file: "docker-{{ docker_version }}.tgz"
    archive_dir: "docker-{{ docker_version }}"
    install_dir: "{{ docker_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=1']"
    bin:
      - docker
      - dockerd
      - docker-init
      - docker-proxy
      - containerd
      - containerd-shim
      - runc
      - ctr

  docker_compose:
    enable: "{%- if container_runtime == 'docker' -%}true{% else %}false{%- endif -%}"
    type: kube_cluster
    url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
    file: "docker-compose-{{ docker_compose_version }}"
    install_dir: "{{ docker_bin_dir }}"
    bin:
      - docker-compose

  calico:
    enable: "{%- if container_network == 'calico' -%}true{% else %}false{%- endif -%}"
    type: kube_cluster
    url: "https://github.com/projectcalico/calico/releases/download/v{{ calico_version }}/release-v{{ calico_version }}.tgz"
    file: "calico-v{{ calico_version }}-linux-amd64.tar.gz"
    archive_dir: "calico-v{{ calico_version }}"
    install_dir: "{{ calico_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=2']"
    bin:
      - calicoctl
    image:
      - calico-node.tar
      - calico-pod2daemon-flexvol.tar
      - calico-cni.tar
      - calico-kube-controllers.tar

  cni:
    enable: "true"
    type: kube_cluster
    # url: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
    # file: "cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
    # archive_dir: "cni-{{ cni_version }}"
    # unarchive:
    #   extra_opt: "['--strip-components=1']"
    url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/cri-containerd-cni-{{ containerd_version }}-linux-amd64.tar.gz"
    file: "cri-containerd-cni-{{ containerd_version }}-linux-amd64.tar.gz"
    archive_dir: "cri-containerd-cni-{{ containerd_version }}"
    unarchive:
      extra_opt: "['--strip-components=3']"
    install_dir: "{{ cni_bin_dir }}"
    bin:
      - bandwidth
      - bridge
      - dhcp
      - firewall
      - flannel
      - host-device
      - host-local
      - ipvlan
      - loopback
      - macvlan
      - portmap
      - ptp
      - sbr
      - static
      - tuning
      - vlan
      - vrf

  helm2:
    enable: "{%- if helm_type == 'helm2' -%}true{% else %}false{%- endif -%}"
    type: kube_cluster
    url: "https://get.helm.sh/helm-v{{ helm2_version }}-linux-amd64.tar.gz"
    file: "helm-v{{ helm2_version }}-linux-amd64.tar.gz"
    archive_dir: "helm-v{{ helm2_version }}"
    install_dir: "{{ helm2_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=1']"
    bin:
      - helm

  helm3:
    enable: "{%- if helm_type == 'helm3' -%}true{% else %}false{%- endif -%}"
    type: kube_cluster
    url: "https://get.helm.sh/helm-v{{ helm3_version }}-linux-amd64.tar.gz"
    file: "helm-v{{ helm3_version }}-linux-amd64.tar.gz"
    archive_dir: "helm-v{{ helm3_version }}"
    install_dir: "{{ helm3_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=1']"
    bin:
      - helm

  helmfile:
    enable: "{{ enable_helmfile }}"
    type: kube_cluster
    url: "https://github.com/roboll/helmfile/releases/download/v{{ helmfile_version }}/helmfile_linux_amd64"
    file: "helmfile_linux_amd64-v{{ helmfile_version }}"
    install_dir: "{{ helmfile_bin_dir }}"
    bin:
      - helmfile

  krew:
    enable: "{{ enable_kubectl_krew }}"
    type: kube_cluster
    url: "https://github.com/kubernetes-sigs/krew/releases/download/v{{ krew_version }}/krew.tar.gz"
    file: "krew-v{{ krew_version }}.tar.gz"
    archive_dir: "krew-v{{ krew_version }}"
    install_dir: "{{ krew_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=1']"
    bin:
      - krew-linux_amd64

  kubectl_debug:
    enable: "{{ enable_kubectl_debug }}"
    type: kube_cluster
    url: "https://github.com/aylei/kubectl-debug/releases/download/v{{ kubectl_debug_version }}/kubectl-debug_{{ kubectl_debug_version }}_linux_amd64.tar.gz"
    file: "kubectl-debug_{{ kubectl_debug_version }}_linux_amd64.tar.gz"
    archive_dir: "kubectl-debug-v{{ kubectl_debug_version }}"
    install_dir: "{{ kubernetes_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=0']"
    bin:
      - kubectl-debug

  k9s:
    enable: "{{ enable_k9s }}"
    type: kube_cluster
    url: "https://github.com/derailed/k9s/releases/download/v{{ k9s_version }}/k9s_v{{ k9s_version }}_Linux_x86_64.tar.gz"
    file: "k9s_Linux_x86_64-v{{ k9s_version }}.tar.gz"
    archive_dir: "k9s-v{{ k9s_version }}"
    install_dir: "{{ kubernetes_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=0']"
    bin:
      - k9s

  kubecm:
    enable: "{{ enable_kubecm }}"
    type: kube_cluster
    url: "https://github.com/sunny0826/kubecm/releases/download/v{{ kubecm_version }}/kubecm_{{ kubecm_version }}_Linux_x86_64.tar.gz"
    file: "kubecm_{{ kubecm_version }}_Linux_x86_64.tar.gz"
    archive_dir: "kubecm-{{ kubecm_version }}"
    install_dir: "{{ kubernetes_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=0']"
    bin:
      - kubecm

  argocd:
    enable: "{{ enable_argocd }}"
    type: kube_cluster
    url: "https://github.com/argoproj/argo-cd/releases/download/v{{ argocd_version }}/argocd-linux-amd64"
    file: "argocd-linux-amd64-v{{ argocd_version }}"
    install_dir: "{{ argocd_bin_dir }}"
    bin:
      - argocd

  vela:
    enable: "{{ enable_vela }}"
    type: kube_cluster
    url: "https://github.com/oam-dev/kubevela/releases/download/v{{ vela_version }}/vela-v{{ vela_version }}-linux-amd64.tar.gz"
    file: "vela-v{{ vela_version }}-linux-amd64.tar.gz"
    archive_dir: "vela-v{{ vela_version }}"
    install_dir: "{{ vela_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=1']"
    bin:
      - vela

  istio:
    enable: "{{ enable_istio }}"
    type: kube_cluster
    url: "https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux-amd64.tar.gz"
    file: "istio-{{ istio_version }}-linux-amd64.tar.gz"
    archive_dir: "istio-{{ istio_version }}"
    install_dir: "{{ istio_bin_dir }}"
    unarchive:
      extra_opt: "['--strip-components=2']"
    bin:
      - istioctl
