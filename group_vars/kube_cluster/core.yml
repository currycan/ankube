# kube-apiserver variables
# https://github.com/kelseyhightower/kubernetes-the-hard-way/issues/626
# 配置聚合层： https://kubernetes.io/zh/docs/tasks/extend-kubernetes/configure-aggregation-layer/
apiserver:
  # advertise_address: "{%- if groups['kube_masters'] | length == 1 -%}{{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }}{%- else -%}{{ vip_address }}{%- endif %}"
  advertise_address: "{{ hostvars[inventory_hostname]['ansible_' + iface].ipv4.address }}"
  secure_port: 6443
  controlplane_endpoint: "{%- if groups['kube_masters'] | length == 1 -%}{{ groups['masters'][0] }}:{{ apiserver_secure_port }}{%- else -%}{{ vip_address }}:{{ lb_secure_port }}{%- endif %}"
  service_node_port_range: 30000-32767
  service_ip_range: "{{ service_subnet }}"
  enable_admission_plugins:
    # - PodSecurityPolicy
    # - SecurityContextDeny
    # https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/
    # - AlwaysPullImages
    - NamespaceExists
    - NamespaceLifecycle
    - LimitRanger
    - ServiceAccount
    - Priority
    - DefaultTolerationSeconds
    - DefaultStorageClass
    - PersistentVolumeClaimResize
    - MutatingAdmissionWebhook
    - ValidatingAdmissionWebhook
    - ResourceQuota
    - NodeRestriction
    # PodPresets API and admission plugin 在 Kubernetes 1.20 版本中移除
    # - PodPreset
    - PersistentVolumeLabel
    - Priority
  disable_admission_plugins: []
  feature_gates:
    RemoveSelfLink: false

# kube-controller-manager variables
controller_manager:
  feature_gates:
    RotateKubeletServerCertificate: true
    VolumeSnapshotDataSource: true
  node_cidr_mask_size: 24
  kube_certs_expired: 87600h0m0s
  horizontal_pod_autoscaler:
    downscale_delay: 15m
    sync_period: 30s
    tolerance: 0.1
    readiness_delay: 30s
    cpu_initialization_period: 5m0s
  attach_detach_reconcile_sync_period: 1m0s
  secure_port: 10257
  # metric port
  insecure_port: 10252
  terminated_pod_gc_threshold: 12500  #退出pod多少秒删除,默认12500
  # kubelet更新自身状态频率 https://github.com/kubernetes-sigs/kubespray/blob/master/docs/kubernetes-reliability.md
  node_status_update: Medium # set one of the Fast | Medium | Low | default
  node_monitor_period: 5s    # 如果改它确保它小于下面的值
  node_status_update_frequency: 10s
  node_monitor_grace_period: 40s
  pod_eviction_timeout: 5m
# node 节点上 pod 网段掩码长度（决定每个节点最多能分配的pod ip地址）
# 如果flannel 使用 --kube-subnet-mgr 参数，那么它将读取该设置为每个节点分配pod网段
# https://github.com/coreos/flannel/issues/847

# kube-scheduler variables
scheduler:
  secure_port: 10259
  insecure_port: 10251

## Extra args for k8s components passing by kubeadm
kubeadm_apiserver_extra_args:
  alsologtostderr: "true"
  # 默认是 true，设置成false,kubeadm join 认证不过
  # anonymous-auth: "false"
  cloud-provider: "external"
  enable-aggregator-routing: "true"
  enable-bootstrap-token-auth: "true"
  log-dir: "{{ kubernetes_log_dir }}/kube-apiserver"
  logtostderr: "false"
  max-requests-inflight: "1500"
  max-mutating-requests-inflight: "500"
  tls-cipher-suites: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256"
  # requestheader-allowed-names: "front-proxy-client"
  # 使用 --requestheader-username-headers 指定的，允许在头部提供用户名的客户端证书通用名称列表。
  # 如果为空，任何通过 --requestheader-client-ca-file 中 authorities 验证的客户端证书都是被允许的。
  requestheader-allowed-names: ""
  # 在信任请求头中以 --requestheader-username-headers 指示的用户名之前，用于验证接入请求中客户端证书的根证书捆绑。
  requestheader-client-ca-file: "{{ front_ca }}"
  requestheader-extra-headers-prefix: "X-Remote-Extra-"
  requestheader-group-headers: "X-Remote-Group"
  requestheader-username-headers: "X-Remote-User"
  runtime-config=api/all: "true"
  v: "2"
kubeadm_controller_extra_args:
  alsologtostderr: "true"
  allocate-node-cidrs: "true"
  attach-detach-reconcile-sync-period: "{{ controller_manager.attach_detach_reconcile_sync_period }}"
  cloud-provider: "external"
  cluster-cidr: "{{ pod_network_cidr }}"
  cluster-name: "{{ cluster_name }}"
  concurrent-deployment-syncs: "10"
  concurrent-gc-syncs: "30"
  concurrent-replicaset-syncs: "10"
  concurrent-service-syncs: "2"
  horizontal-pod-autoscaler-cpu-initialization-period: "{{ controller_manager.horizontal_pod_autoscaler.cpu_initialization_period }}"
  horizontal-pod-autoscaler-downscale-stabilization: "{{ controller_manager.horizontal_pod_autoscaler.downscale_delay }}"
  horizontal-pod-autoscaler-initial-readiness-delay: "{{ controller_manager.horizontal_pod_autoscaler.readiness_delay }}"
  horizontal-pod-autoscaler-sync-period: "{{ controller_manager.horizontal_pod_autoscaler.sync_period }}"
  horizontal-pod-autoscaler-tolerance: "{{ controller_manager.horizontal_pod_autoscaler.tolerance }}"
  kube-api-qps: "500"
  kube-api-burst: "200"
  log-dir: "{{ kubernetes_log_dir }}/kube-controller-manager"
  logtostderr: "false"
  port: "{{ controller_manager.insecure_port }}"
  # requestheader-allowed-names: "front-proxy-client"
  # 使用 --requestheader-username-headers 指定的，允许在头部提供用户名的客户端证书通用名称列表。
  # 如果为空，任何通过 --requestheader-client-ca-file 中 authorities 验证的客户端证书都是被允许的。
  requestheader-allowed-names: ""
  # 在信任请求头中以 --requestheader-username-headers 指示的用户名之前，用于验证接入请求中客户端证书的根证书捆绑。
  requestheader-client-ca-file: "{{ front_ca }}"
  service-cluster-ip-range: "{{ apiserver.service_ip_range }}"
  secure-port: "{{ controller_manager.secure_port }}"
  v: "2"
kubeadm_scheduler_extra_args:
  alsologtostderr: "true"
  kube-api-qps: "500"
  kube-api-burst: "200"
  log-dir: "{{ kubernetes_log_dir }}/kube-scheduler"
  logtostderr: "false"
  port: "{{ scheduler.insecure_port }}"
  # requestheader-allowed-names: "front-proxy-client"
  # 使用 --requestheader-username-headers 指定的，允许在头部提供用户名的客户端证书通用名称列表。
  # 如果为空，任何通过 --requestheader-client-ca-file 中 authorities 验证的客户端证书都是被允许的。
  #- requestheader-allowed-names: ""
  # 在信任请求头中以 --requestheader-username-headers 指示的用户名之前，用于验证接入请求中客户端证书的根证书捆绑。
  #- requestheader-client-ca-file: "{{ front_ca }}"
  v: "2"

## Extra control plane host volume mounts
## Example:
# apiserver_extra_volumes:
#  - name: name
#    hostPath: /host/path
#    mountPath: /mount/path
#    readOnly: true
apiserver_extra_volumes: {}
controller_manager_extra_volumes: {}
scheduler_extra_volumes: {}

# kubelet variables
# kubeadm config print init-defaults --component-configs KubeletConfiguration
kubelet:
  max_pods: 128
  pod_infra_container_image: "{{ images.infra.name }}"
  bind_port: 10250
  bind_read_port: 10255
  bind_healthz_port: 10248
  # 资源驱逐相关配置
  eviction_hard_imagefs_available: 15%
  eviction_hard_memory_available: 100Mi
  eviction_hard_nodefs_available: 10%
  eviction_hard_nodefs_inodes_free: 5%
  # kubernetes组件预留资源
  kube_reserved_enabled: true
  kube_cpu_reserved: 100m
  kube_memory_reserved: 256M
  kube_ephemeral_storage_reserved: 1G
  # 操作系统守护进程预留资源，需要根据实际经验开启，预留资源过大，资源浪费，过小kubelet无法启动
  system_reserved_enabled: true
  system_cpu_reserved: 500m
  # master节点设置memory=512Mi就会出现device or resource busy的情况,因为kubelet尝试对system.slice配置限制内存为你给定的值。而因实际使用已经超出
  # master节点最少配置 1024M
  system_memory_reserved: "{%- if inventory_hostname in groups['kube_masters'] -%}1.2G{%- else -%}1G{%- endif -%}"
  system_ephemeral_storage_reserved: 10G
  #  以下资源默认也都是开启的
  feature_gates:
    DevicePlugins: true
    CPUManager: true
    # 启用服务端证书轮换
    RotateKubeletServerCertificate: true
    # 启用客户端证书轮换
    RotateKubeletClientCertificate: true

# kube-proxy variables
kube_proxy:
  healthz_port: 10256
  metrics_port: 10249
  proxy_mode: ipvs
  ipvs_scheduler: rr
